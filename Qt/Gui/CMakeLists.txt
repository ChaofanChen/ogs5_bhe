# Source files
set( SOURCES
	mainwindow.cpp
)

# Moc Header files
set( MOC_HEADERS
	mainwindow.h
)

# Header files
set( HEADERS

)

# UI files
set( UIS
	mainwindow.ui
)


# Run Qts user interface compiler uic on .ui files
qt4_wrap_ui( UI_HEADERS ${UIS} )

# Run Qts meta object compiler moc on header files
qt4_wrap_cpp( MOC_SOURCES ${MOC_HEADERS} )

# Include the headers which are generated by uic and moc
# and include additional header
include_directories(
	${CMAKE_BINARY_DIR}/Qt/Base
	${CMAKE_BINARY_DIR}/Qt/Gui
	${CMAKE_BINARY_DIR}/Qt/DataView
	${CMAKE_BINARY_DIR}/Qt/StationView
	${CMAKE_BINARY_DIR}/Qt/StratView
	${CMAKE_BINARY_DIR}/Qt/VtkVis
	${CMAKE_BINARY_DIR}/Qt/VtkAct
	../../Base
	../../MathLib
	../../GEO
	../../FileIO
	../../MSH
	../../FEM
	../Base
	../DataView
	../StationView
	../StratView
	../VtkVis
	../VtkAct
	${Shapelib_INCLUDE_DIR}	
)

if (OGS_COMPILE_QVTK)
	include_directories(${CMAKE_BINARY_DIR}/Qt/QVTK ../QVTK)
endif (OGS_COMPILE_QVTK)

# Put moc files in a project folder
source_group("UI Files" REGULAR_EXPRESSION "\\w*\\.ui")
source_group("Moc Files" REGULAR_EXPRESSION "moc_.*")


# Create the library
add_executable( ogs-gui
	main.cpp
	${SOURCES}
	${HEADERS}
	${MOC_HEADERS}
	${MOC_SOURCES}
	${UIS}
)

# Link Qt library
target_link_libraries( ogs-gui
	${QT_LIBRARIES}
	GEO
	FileIO
	MSH
	FEM
	OGSProject
	QtBase
	QtDataView
	StationView
	StratView
	${Shapelib_LIBRARIES}
	${libtiff_LIBRARIES}
	${libgeotiff_LIBRARIES}
	QVTK
	VtkVis
	VtkAct
)

add_dependencies ( ogs-gui VtkVis OGSProject )

# Set linker flags
IF(MSVC)
	SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /NODEFAULTLIB:MSVCRT")
ENDIF(MSVC)

### OpenSG support ###
IF (OGS_USE_OPENSG)
	USE_OPENSG(ogs-gui)
ENDIF (OGS_USE_OPENSG)

###################
### VRED plugin ###
###################

IF (OGS_VRED_PLUGIN)

	ADD_DEFINITIONS(
		-DBOOST_PYTHON_DYNAMIC_LIB
	)
  
	INCLUDE_DIRECTORIES(
		#${VRED_DIR}/include/vred
	    ${VRED_DIR}/include/boost-1.34-vc8.0
	    ${VRED_DIR}/include/python-2.52-vc8.0
	    #${VRED_DIR}/include/zlib-1.23
	    #${VRED_DIR}/include/OpenSG
	    #${VRED_DIR}/include/OpenSG/OpenSG
	)
	LINK_DIRECTORIES( ${VRED_DIR}/bin/WIN32 )
	
	ADD_LIBRARY( ogs-gui-vred SHARED
		${SOURCES}
		${HEADERS}
		${MOC_HEADERS}
		${MOC_SOURCES}
		${UIS}
		pymainwindow.cpp
	)
	TARGET_LINK_LIBRARIES( ogs-gui-vred
		${QT_LIBRARIES}
		GEO
		FileIO
		MSH
		FEM
		OGSProject
		QtBase
		QtDataView
		StationView
		StratView
		${Shapelib_LIBRARIES}
		${libtiff_LIBRARIES}
		${libgeotiff_LIBRARIES}
		QVTK
		VtkVis
		VtkAct
		#boost_python-vc80-mt-1_34_1
	)
	
	ADD_DEPENDENCIES ( ogs-gui-vred VtkVis OGSProject )
ENDIF (OGS_VRED_PLUGIN)

####################
### Installation ###
####################

IF (OGS_PACKAGING)
	install (TARGETS ogs-gui RUNTIME DESTINATION bin COMPONENT ogs_gui)
	
	include(GetPrerequisites)
	if (EXISTS ${CMAKE_BINARY_DIR}/bin/Release/ogs-gui.exe)
		get_prerequisites(@CMAKE_BINARY_DIR@/bin/Release/ogs-gui.exe OGS_GUI_DEPENDENCIES 1 1 "" "")
		message (STATUS "ogs-gui depends on ${OGS_GUI_DEPENDENCIES}")
		foreach(DEPENDENCY ${OGS_GUI_DEPENDENCIES})
			gp_resolve_item ("/" "${DEPENDENCY}" ${CMAKE_BINARY_DIR}/bin/Release/ogs-gui.exe "/" DEPENDENCY_PATH)
			set (DEPENDENCY_PATHS ${DEPENDENCY_PATHS} ${DEPENDENCY_PATH})
		endforeach (DEPENDENCY IN ${OGS_GUI_DEPENDENCIES})
		install (FILES ${DEPENDENCY_PATHS} DESTINATION bin COMPONENT ogs_gui)
	endif (EXISTS ${CMAKE_BINARY_DIR}/bin/Release/ogs-gui.exe)
ENDIF (OGS_PACKAGING)
