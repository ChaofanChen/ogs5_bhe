#### OGS-5 Project ####
## Programmed by Lars Bilke
## Modified by:
##            WW 20.04.2010. 

# Specify minimum CMake version
cmake_minimum_required(VERSION 2.6)	# or set to 2.4 for older systems (like JUGENE...)

SET (OGS_VERSION_MAJOR 5)
SET (OGS_VERSION_MINOR 0)
SET (OGS_VERSION_PATCH 06)
SET (OGS_RELEASE_PERSONS "FS/KR/LB")
SET (OGS_VERSION "${OGS_VERSION_MAJOR}.${OGS_VERSION_MINOR}.${OGS_VERSION_PATCH}(${OGS_RELEASE_PERSONS})")
SET (OGS_DATE "13.07.2010")

# Adds useful macros and variables
INCLUDE( CMakeConfiguration/Macros.cmake )

IF (WIN32)
	IF (MSVC)
		ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
		ADD_DEFINITIONS(-D_CRT_NONSTDC_NO_WARNINGS)
		ADD_DEFINITIONS(-D_CRT_XNONSTDC_NO_WARNINGS)
		SET ( CMAKE_CONFIGURATION_TYPES "Release;Debug" CACHE TYPE INTERNAL FORCE )
	ELSE (MSVC)
		MESSAGE (FATAL_ERROR "Aborting: On Windows only the Visual Studio compiler is supported!")
	ENDIF (MSVC)
ENDIF (WIN32)

### For GNU C/CXX. WW
IF(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_GNUCC)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated -Wall -Wextra")
        ADD_DEFINITIONS(
		-DGCC
#		-pedantic
		-fno-nonansi-builtins
	)
ENDIF(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_GNUCC)

### These two difintitions are true by default. Should be removed late on. WW
ADD_DEFINITIONS(-DPROBLEM_CLASS)
ADD_DEFINITIONS(-DRANDOM_WALK)

# Set build directories
SET( EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin )
SET( LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib )

FIND_PATH (LIB_DIR_FOUND qd.lib ${PROJECT_SOURCE_DIR}/LIB)
IF (LIB_DIR_FOUND)
	INCLUDE_DIRECTORIES( ${PROJECT_SOURCE_DIR}/LIB )
	LINK_DIRECTORIES( ${PROJECT_SOURCE_DIR}/LIB )
ENDIF (LIB_DIR_FOUND)

# Set additional CMake modules path
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/CMakeConfiguration")

#INCLUDE( CMakeConfiguration/Options.cmake )

###-----WW------------------------------------------------------
#OPTION Parallel
OPTION(PARALLEL_USE_MPI OFF)
OPTION(PARALLEL_USE_OPENMP OFF)
IF(_OPENMP)
	SET(PARALLEL_USE_OPENMP ON)
ENDIF(_OPENMP)
IF(PARALLEL_USE_OPENMP)
	SET(_OPENMP ON)
ENDIF(PARALLEL_USE_OPENMP)

# Configurations
OPTION(OGS_FEM "Default configuration" OFF)
OPTION(OGS_FEM_SP "Sparse matrix configuration" OFF)
OPTION(OGS_FEM_GEMS "GEMS configuration" OFF)
OPTION(OGS_FEM_PQC "Phreeqc configuration" OFF)
OPTION(OGS_FEM_BRNS "BRNS configuration" OFF)
OPTION(OGS_FEM_CHEMAPP "CHEMAPP configuration" OFF)
OPTION(OGS_USE_QT "User interface configuration" OFF)

IF (UNIX) # Only supported on Linux
	OPTION(OGS_FEM_LIS "Library of Iterative Solvers for Linear Systems configuration" OFF)
	OPTION(OGS_FEM_MKL "Math kernel library configuration" OFF)
	OPTION(OGS_FEM_MPI "Message passing interface configuration" OFF)
ENDIF (UNIX)

# Set default configuration when no other config is given
IF (NOT OGS_FEM AND NOT OGS_FEM_SP AND NOT OGS_FEM_GEMS AND NOT OGS_FEM_PQC AND NOT OGS_FEM_BRNS AND NOT OGS_FEM_CHEMAPP AND NOT OGS_FEM_LIS AND NOT OGS_FEM_MKL AND NOT OGS_FEM_MPI AND NOT OGS_USE_QT)
	MESSAGE (STATUS "No configuration specified. Default confuguration is used.")
	SET (OGS_FEM ON)
ENDIF (NOT OGS_FEM AND NOT OGS_FEM_SP AND NOT OGS_FEM_GEMS AND NOT OGS_FEM_PQC AND NOT OGS_FEM_BRNS AND NOT OGS_FEM_CHEMAPP AND NOT OGS_FEM_LIS AND NOT OGS_FEM_MKL AND NOT OGS_FEM_MPI AND NOT OGS_USE_QT)
OPTION(OGS_BUILD_UTILITIES "Build additional utility programs?" OFF)

# Additional options
OPTION(OGS_PACKAGING "Creating installers / packages" OFF)
IF (OGS_PACKAGING)
	OPTION (OGS_PACKAGING_ZIP "Do you want to package as zip?" OFF)
ENDIF (OGS_PACKAGING)
OPTION(OGS_PYTHON "Enable python scripting interface" OFF)
OPTION(OGS_CMAKE_DEBUG "Show additional cmake debug information" OFF)

IF(OGS_FEM_SP)
	SET( PRJ_EXT "-SP" )
	INCLUDE(configs/sparse.cmake)
ENDIF(OGS_FEM_SP)

IF(OGS_FEM_MPI)
	SET( PRJ_EXT "-MPI" )
	SET(PARALLEL_USE_MPI ON)	
	INCLUDE(configs/sparse.cmake)
ENDIF(OGS_FEM_MPI)

IF(OGS_FEM_GEMS)
	SET( PRJ_EXT "-GEMS" )
	INCLUDE(configs/gems.cmake)
ENDIF(OGS_FEM_GEMS)

IF(OGS_FEM_PQC)
	SET( PRJ_EXT "-PQC" )
	INCLUDE(configs/PQC.cmake)
ENDIF(OGS_FEM_PQC)

IF(OGS_FEM_BRNS)
	SET( PRJ_EXT "-BRNS" )
	INCLUDE(configs/BRNS.cmake)
ENDIF(OGS_FEM_BRNS)

IF(OGS_FEM_LIS)
	SET( PRJ_EXT "-LIS" )
	SET(PARALLEL_USE_OPENMP ON)
	INCLUDE(configs/vc_lis.cmake)
ENDIF(OGS_FEM_LIS)

IF(OGS_FEM_MKL)
	SET( PRJ_EXT "-MKL" )
	SET(PARALLEL_USE_OPENMP ON)
	INCLUDE(configs/pardiso.cmake)
ENDIF(OGS_FEM_MKL)
IF (OGS_FEM_CHEMAPP)
	SET( PRJ_EXT "-CHEMAPP" )
	INCLUDE(configs/chemapp.cmake)
ENDIF (OGS_FEM_CHEMAPP)
###-----WW


###LIBRARY
FIND_PACKAGE (PythonInterp)


IF (OGS_PYTHON)
	FIND_PACKAGE (PythonLibs 2.5 REQUIRED)
ENDIF (OGS_PYTHON)

IF(MKL)
	IF (UNIX)
		#Extract MKL
		FIND_PATH (MKL_INCLUDE_DIR_FOUND mkl.h ${PROJECT_SOURCE_DIR}/../Libs/MKL/include)
		IF (NOT MKL_INCLUDE_DIR_FOUND)
			FIND_PATH (MKL_DIR_FOUND mkl-include.tgz ${PROJECT_SOURCE_DIR}/../Libs/MKL)
			IF (MKL_DIR_FOUND)
				MESSAGE (STATUS "Uncompressing MKL...")
				EXECUTE_PROCESS (COMMAND tar xvzf mkl-include.tgz WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/../Libs/MKL/ OUTPUT_QUIET)
				IF (HAVE_64_BIT)
					EXECUTE_PROCESS (COMMAND tar xvzf mkl-64.tgz WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/../Libs/MKL/ OUTPUT_QUIET)
				ELSE (HAVE_64_BIT)
					EXECUTE_PROCESS (COMMAND tar xvzf mkl-32.tgz WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/../Libs/MKL/ OUTPUT_QUIET)
				ENDIF (HAVE_64_BIT)
			ELSE (MKL_DIR_FOUND)
				MESSAGE (STATUS "MKL archives in ../Libs/ not found")
			ENDIF (MKL_DIR_FOUND)
		ENDIF (NOT MKL_INCLUDE_DIR_FOUND)
		
		# Find MKLlib
		FIND_PACKAGE( MKL REQUIRED )
		SET(PARALLEL_USE_OPENMP ON)

		SET(CMAKE_CXX_FLAGS "-I${CMAKE_SOURCE_DIR}/../Libs/MKL/include")
		if(CMAKE_SIZEOF_VOID_P MATCHES "8")
			SET(CMAKE_CXX_LINK_FLAGS "-L${CMAKE_SOURCE_DIR}/../Libs/MKL/64 -llis-64 -lmkl_solver_lp64 -lmkl_intel_lp64 -lmkl_gnu_thread -lmkl_core ")
		else (CMAKE_SIZEOF_VOID_P MATCHES "8")
			SET(CMAKE_CXX_LINK_FLAGS "-L${CMAKE_SOURCE_DIR}/../Libs/MKL/32 -llis-32 -lmkl_solver -lmkl_intel -lmkl_gnu_thread -lmkl_core ")
		endif (CMAKE_SIZEOF_VOID_P MATCHES "8")
	ELSE(UNIX)
		MESSAGE (FATAL_ERROR "MKL is only supported under LINUX/UNIX" )	
	ENDIF (UNIX)
ENDIF(MKL)

IF(LIS)
	# Find LISlib
	IF (UNIX)
		FIND_PACKAGE( LIS REQUIRED )
		#set (LIS ON)
		set (NEW_EQS ON)
		add_definitions(
			-o3
			-DIPMGEMPLUGIN
		)	
	ELSE(UNIX)
		MESSAGE (FATAL_ERROR  "LIS is only supported under LINUX/UNIX" )	
	ENDIF (UNIX)
ENDIF(LIS)


IF(OGS_USE_QT)
	# Find Shapelib
	FIND_PACKAGE( Shapelib )

	# Find Qt4 library
	FIND_PACKAGE( Qt4 4.5 REQUIRED)

	IF ( QT4_FOUND )
		# OPTION(OGS_GUI OFF )
		# this is needed to correctly link the qt libraries through target_link_libraries
		# By default only QtCore and QtGui modules are enabled
		# other modules must be enabled like this:
		SET( QT_USE_QTOPENGL TRUE )
		SET( QT_USE_QTSQL TRUE )
		SET( QT_USE_QTTEST TRUE )
		SET( QT_USE_QTXML TRUE )
		IF (QT_QTXMLPATTERNS_FOUND)
			set( QT_USE_QTXMLPATTERNS TRUE )
		ENDIF (QT_QTXMLPATTERNS_FOUND)
		INCLUDE( ${QT_USE_FILE} )
	ENDIF (QT4_FOUND )
ENDIF(OGS_USE_QT)

# Create Configure.h
CONFIGURE_FILE (Base/Configure.h.in ${PROJECT_BINARY_DIR}/Base/Configure.h)
INCLUDE_DIRECTORIES( ${PROJECT_BINARY_DIR}/Base )

IF(OGS_FEM)
   MESSAGE (STATUS  "Configuring for FEM command line" )	
	SET(OGS_GUI OFF )
	SET(OGS_FEM_SP OFF )
	SET(OGS_FEM_MPI OFF )
	SET(OGS_FEM_GEMS OFF )
	SET(OGS_FEM_BRNS OFF )
	SET(OGS_FEM_MKL OFF )
	SET(OGS_FEM_PQC OFF )
	SET(OGS_FEM_LIS OFF )   
	SET(OGS_FEM_CHEMAPP OFF)
#
#
   INCLUDE(FEM.cmake )
ENDIF(OGS_FEM)

IF(OGS_FEM_SP)
   MESSAGE (STATUS  "Configuring for FEM command line with new sparse matrix" )	
	SET(OGS_GUI OFF )
	SET(OGS_FEM OFF )
	SET(OGS_FEM_MPI OFF )
	SET(OGS_FEM_GEMS OFF )
	SET(OGS_FEM_BRNS OFF )
	SET(OGS_FEM_MKL OFF )
	SET(OGS_FEM_PQC OFF )
	SET(OGS_FEM_LIS OFF )   
	SET(OGS_FEM_CHEMAPP OFF)
   INCLUDE(FEM.cmake )
ENDIF(OGS_FEM_SP)

IF(OGS_FEM_MPI)
   MESSAGE (STATUS  "Configuring for FEM command line with MPI" )	
	SET(OGS_GUI OFF )
	SET(OGS_FEM_SP OFF )
	SET(OGS_FEM OFF )
	SET(OGS_FEM_GEMS OFF )
	SET(OGS_FEM_BRNS OFF )
	SET(OGS_FEM_MKL OFF )
	SET(OGS_FEM_PQC OFF )
	SET(OGS_FEM_LIS OFF )   
	SET(OGS_FEM_CHEMAPP OFF)
   INCLUDE(FEM.cmake )
ENDIF(OGS_FEM_MPI)

IF(OGS_FEM_GEMS)
   MESSAGE (STATUS  "Configuring for FEM command line with GEMS" )	
	SET(OGS_GUI OFF )
	SET(OGS_FEM_SP OFF )
	SET(OGS_FEM_MPI OFF )
	SET(OGS_FEM OFF )
	SET(OGS_FEM_BRNS OFF )
	SET(OGS_FEM_MKL OFF )
	SET(OGS_FEM_PQC OFF )
	SET(OGS_FEM_LIS OFF )
	SET(OGS_FEM_CHEMAPP OFF)
   INCLUDE(FEM.cmake )
ENDIF(OGS_FEM_GEMS)

IF(OGS_FEM_PQC)
   MESSAGE (STATUS  "Configuring for FEM command line with PQC" )	
	SET(OGS_GUI OFF )
	SET(OGS_FEM_SP OFF )
	SET(OGS_FEM_MPI OFF )
	SET(OGS_FEM_GEMS OFF )
	SET(OGS_FEM_BRNS OFF )
	SET(OGS_FEM_MKL OFF )
	SET(OGS_FEM OFF )
	SET(OGS_FEM_LIS OFF ) 
	SET(OGS_FEM_CHEMAPP OFF)
	INCLUDE(FEM.cmake )  
    ADD_SUBDIRECTORY ( PQC )
ENDIF(OGS_FEM_PQC)

IF(OGS_FEM_BRNS)
	MESSAGE (STATUS  "Configuring for FEM command line with BRNS" )	
	SET(OGS_GUI OFF )
	SET(OGS_FEM_SP OFF )
	SET(OGS_FEM_MPI OFF )
	SET(OGS_FEM_GEMS OFF )
	SET(OGS_FEM_MKL OFF )
	SET(OGS_FEM OFF )
	SET(OGS_FEM_LIS OFF )  
	SET(OGS_FEM_CHEMAPP OFF) 
	INCLUDE(FEM.cmake)
ENDIF(OGS_FEM_BRNS)

IF(OGS_FEM_LIS)
   MESSAGE (STATUS  "Configuring for FEM command line with LIS" )	
	SET(OGS_GUI OFF )
	SET(OGS_FEM_SP OFF )
	SET(OGS_FEM_MPI OFF )
	SET(OGS_FEM_GEMS OFF )
	SET(OGS_FEM_BRNS OFF )
	SET(OGS_FEM_MKL OFF )
	SET(OGS_FEM_PQC OFF )
	SET(OGS_FEM OFF )   
	SET(OGS_FEM_CHEMAPP OFF)
   INCLUDE(FEM.cmake )
ENDIF(OGS_FEM_LIS)

IF(OGS_FEM_MKL)
   MESSAGE (STATUS  "Configuring for FEM command line with MKL" )	
	SET(OGS_GUI OFF )
	SET(OGS_FEM_SP OFF )
	SET(OGS_FEM_MPI OFF )
	SET(OGS_FEM_GEMS OFF )
	SET(OGS_FEM_BRNS OFF )
	SET(OGS_FEM OFF )
	SET(OGS_FEM_PQC OFF )
	SET(OGS_FEM_LIS OFF )  
	SET(OGS_FEM_CHEMAPP OFF) 
   INCLUDE(FEM.cmake )
ENDIF(OGS_FEM_MKL)

IF(OGS_FEM_CHEMAPP)
   MESSAGE (STATUS  "Configuring for FEM command line with CHEMAPP" )	
	SET(OGS_GUI OFF )
	SET(OGS_FEM_SP OFF )
	SET(OGS_FEM_MPI OFF )
	SET(OGS_FEM_GEMS OFF )
	SET(OGS_FEM_BRNS OFF )
	SET(OGS_FEM OFF )
	SET(OGS_FEM_PQC OFF )
	SET(OGS_FEM_LIS OFF )   
	SET(OGS_FEM_MKL OFF )
   INCLUDE(FEM.cmake )
ENDIF(OGS_FEM_CHEMAPP)
###-----WW

#IF(OGS_USE_QT AND QT4_FOUND)
#	SET(OGS_GUI ON)
#ENDIF(OGS_USE_QT AND QT4_FOUND)
IF(OGS_USE_QT)
   MESSAGE (STATUS  "Configuring for OGS with GUI" )	
   SET(OGS_FEM ON )
   INCLUDE(FEM.cmake )
   INCLUDE(GUI.cmake )
ENDIF(OGS_USE_QT)


IF(CMAKE_MINOR_VERSION GREATER 6)
	IF (${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )
		#SET (GTEST_MSVC_SEARCH MT)
		SET (GTEST_ROOT ${PROJECT_SOURCE_DIR}/../Libs/gtest)
	ENDIF (${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )
	FIND_PACKAGE (GTest)
ENDIF(CMAKE_MINOR_VERSION GREATER 6)

FIND_PATH (BENCHMARK_DIR_FOUND compare.py ${PROJECT_SOURCE_DIR}/../benchmarks)

IF (BENCHMARK_DIR_FOUND OR GTEST_FOUND)
	ENABLE_TESTING()
ENDIF (BENCHMARK_DIR_FOUND OR GTEST_FOUND)

FIND_PATH (EXAMPLEDATA_DIR_FOUND points.gli ${PROJECT_SOURCE_DIR}/../ExampleData)

IF (EXAMPLEDATA_DIR_FOUND)
	INSTALL (DIRECTORY ${PROJECT_SOURCE_DIR}/../ExampleData DESTINATION . PATTERN .svn EXCLUDE)
ENDIF (EXAMPLEDATA_DIR_FOUND)

IF (GTEST_FOUND)
	include_directories(${GTEST_INCLUDE_DIRS})
	add_subdirectory (TestRunner)
ENDIF (GTEST_FOUND)

IF (OGS_PACKAGING)
	# Add packaging configuration
	MESSAGE (STATUS "Enabling packaging")
	INCLUDE( CMakeConfiguration/Pack.cmake)
ENDIF (OGS_PACKAGING)

IF (OGS_CMAKE_DEBUG)
	INCLUDE (CMakeConfiguration/PrintVariables.cmake)
ENDIF (OGS_CMAKE_DEBUG)	

IF (BENCHMARK_DIR_FOUND)
	MESSAGE (STATUS "Benchmarking through CTest enabled")
	INCLUDE (${PROJECT_SOURCE_DIR}/../benchmarks/AKS.cmake)
	INCLUDE (${PROJECT_SOURCE_DIR}/../benchmarks/CB.cmake)
	INCLUDE (${PROJECT_SOURCE_DIR}/../benchmarks/FS.cmake)
	INCLUDE (${PROJECT_SOURCE_DIR}/../benchmarks/HS.cmake)
	INCLUDE (${PROJECT_SOURCE_DIR}/../benchmarks/JOD.cmake)
	INCLUDE (${PROJECT_SOURCE_DIR}/../benchmarks/NB.cmake)
	INCLUDE (${PROJECT_SOURCE_DIR}/../benchmarks/NW.cmake)
	INCLUDE (${PROJECT_SOURCE_DIR}/../benchmarks/PCH.cmake)
	INCLUDE (${PROJECT_SOURCE_DIR}/../benchmarks/UJG.cmake)
	INCLUDE (${PROJECT_SOURCE_DIR}/../benchmarks/WW.cmake)
	INCLUDE (${PROJECT_SOURCE_DIR}/../benchmarks/YW.cmake)
	INCLUDE (${PROJECT_SOURCE_DIR}/../benchmarks/MCGB.cmake)
	UNSET (COPY_BENCHMARKS_TO_REF CACHE)
ENDIF (BENCHMARK_DIR_FOUND)

IF (FileConverter)
	ADD_SUBDIRECTORY (UTL/FileConverter/)
ENDIF (FileConverter)

